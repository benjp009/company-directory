
// Basic Database */

datasource db {
  provider = "postgresql" // or mysql/sqlite
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Company {
  id          String     @id @default(cuid())
  name        String
  description String?
  website     String?
  email       String?
  phone       String?
  siret       String?    @unique
  revenue2023 Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  categories  Category[] @relation("CompanyCategories")
  keywords    Keyword[]  @relation("CompanyKeywords")
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  companies Company[]  @relation("CompanyCategories")
}

model Keyword {
  id        String     @id @default(cuid())
  name      String     @unique
  companies Company[]  @relation("CompanyKeywords")
}

// Add NextAuth models for credentials & OAuth
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String?   // hashed password for credentials auth
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @map("refresh_token")
  access_token       String?  @map("access_token")
  expires_at         Int?     @map("expires_at")
  token_type         String?  @map("token_type")
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}